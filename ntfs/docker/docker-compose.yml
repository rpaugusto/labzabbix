version: '3.9'

services:

  mysql-server:
    image: mysql:8.0 # Use the latest Mysql image
    restart: always
    container_name: mysql-server # Set the container name
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: ${TZ}
    command: 
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_bin
      - --log-bin-trust-function-creators=1
    volumes:
      - mysql_data:/var/lib/mysql # Persist MySql data
    ports:
      - "3306:3306"
    networks:
      - monitoring_network  # Assign the network

  grafana:
    image: grafana/grafana:latest  # Use the latest Grafana image
    container_name: grafana  # Set the container name
    restart: always
    environment:
      TZ: ${TZ}
      GF_SNAPSHOTS_ENABLED: True # Enable the Snapshot feature
      GF_RENDERING_SERVER_URL : http://grafana-renderer:8081/render # Enable Renderer plugin
      GF_RENDERING_CALLBACK_URL : http://grafana:3000
      GF_AUTH_BASIC_ENABLED : True
      GF_LOG_FILTERS: rendering:debug
      GF_SECURITY_ADMIN_USER : admin
      GF_SECURITY_ADMIN_PASSWORD : grafana
      GF_USERS_ALLOW_SIGN_UP : False
      GF_USERS_ALLOW_ORG_CREATE : False
      GF_AUTH_ANONYMOUS_ENABLED : True
      GF_AUTH_ANONYMOUS_ORG_ROLE : Viewer
      GF_AUTH_ANONYMOUS_ORG_NAME : MainOrg
      GF_USERS_AUTO_ASSIGN_ORG : MainOrg
      GF_USERS_AUTO_ASSIGN_ROLE : Admin
      GF_AUTH_API_KEY_ENABLED : True
    volumes:
      - grafana_data:/var/lib/grafana  # Persist Grafana data
      #- ./grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - "3000:3000"
    networks:
      - monitoring_network  # Assign the network 

  grafana-renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: grafana-renderer
    restart: always
    ports:
      - "8081:8081"  # This is the default port for the image renderer
    networks:
      - monitoring_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus  # Set the container name
    restart: always
    environment:
      TZ: ${TZ}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring_network  # Assign the network

  zabbix-server:
    image: zabbix/zabbix-server-mysql:latest
    container_name: zabbix-server  # Set the container name
    restart: always
    environment:
      DB_SERVER_HOST: ${MYSQL_CONTAINER_NAME}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      ZBX_ENABLE_JAVASCRIPT: 'true'
      PHP_TZ: ${TZ}
    depends_on:
      - ${MYSQL_CONTAINER_NAME}
    ports:
      - "10051:10051"
    networks:
      - monitoring_network  # Assign the network
    volumes:
      - /usr/local/bin:/usr/local/bin:ro  # Mount the host Python directory in the container
      - zabbix_server_data:/var/lib/zabbix
      - zabbix_server_script:/usr/lib/zabbix/externalscripts:ro

  zabbix-web:
    image: zabbix/zabbix-web-nginx-mysql:latest
    container_name: zabbix-web # Set the container name
    restart: always
    environment:
      ZBX_SERVER_HOST: zabbix-server
      ZBX_SERVER_PORT: 10051
      ZBX_SERVER_NAME: ZabbixLab_6.4
      DB_SERVER_HOST: ${MYSQL_CONTAINER_NAME}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PHP_TZ: ${TZ}
    depends_on:
      - ${MYSQL_CONTAINER_NAME}
      - zabbix-server
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./zabbix/web/nginx_status.conf:/etc/nginx/conf.d:ro
    networks:
      - monitoring_network  # Assign the network

  zabbix-agent2:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zabbix-agent2 # Set the container name
    environment:
      - ZBX_HOSTNAME=container_agent
      - ZBX_SERVER_HOST=zabbix-server
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring_network  # Assign the network

  fake-metrics:
    build:
      context: .  # Use the current directory as the build context
    container_name: fake-metrics  # Set the container name
    ports:
      - "5000:5000"  # Map host port 5000 to container port 5000
    networks:
      - monitoring_network  # Assign the network 

## Define the volumes for data persistence ##
volumes:
  mysql_data: # Define the volume for MySql data persistence
    name: mysql-data # Set the volume name
    driver: local
    driver_opts:
      type: none
      device: /opt/docker/mysql/
      o: bind

  grafana_data:  # Define the volume for Grafana data persistence
    name: grafana-data # Set the volume name
    driver: local
    driver_opts:
      type: none
      device: /opt/docker/grafana/
      o: bind

  zabbix_server_data: # Define the volume for Zabbix Server data persistence
    name: zabbix-server-data # Set the volume name
    driver: local
    driver_opts:
      type: none
      device: /opt/docker/zabbix/server/
      o: bind

  zabbix_server_script: # Define the volume for Zabbix Server data persistence
    name: zabbix-server-script # Set the volume name
    driver: local
    driver_opts:
      type: none
      device: /opt/docker/zabbix/server/scripts
      o: bind
    
networks:
  monitoring_network:
    driver: bridge